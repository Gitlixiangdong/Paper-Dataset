; fname: fracture.p3fis
;
; Simple environment to track fragmentation in a BPM.
; Track LinearPBond model "bond_change" events and turn them into fractures.
; Use Fragment logic and Ball Result logic to record fragemnt ids 
;
;==============================================================================

define add_crack(entries)
    local contact    = entries(1)
    local mode       = entries(2)
    local strength   = entries(3)
    local frac_pos   = contact.pos(contact)
    local norm       = contact.normal(contact)
    local dfn_label  = 'crack'
    local frac_size
    local bp1 = contact.end1(contact)
    local bp2 = contact.end2(contact)
    local ret = math.min(ball.radius(bp1),ball.radius(bp2));contact.method(contact,'pb_radius')
    frac_size = ret
    local inDir = vector(-comp.y(norm),comp.x(norm))
    local vert1 = frac_pos + inDir * frac_size
    local vert2 = frac_pos - inDir * frac_size
    local arg = array.create(4)
    arg(1) = 'vertices'
    arg(2) = 2
    arg(3) = vert1
    arg(4) = vert2
    crack_num = crack_num + 1
    
    if mode = 1 then 
        ; failed in tension
        dfn_label = dfn_label + '_tension'
        crk_tension=crk_tension+1
    else if mode = 2 then
        ; failed in shear
        dfn_label = dfn_label + '_shear'
        crk_shear=crk_shear+1
    endif
        
    global dfn = dfn.find(dfn_label)
    if dfn = null then
        dfn = dfn.add(0,dfn_label)
    endif
    local fnew = dfn.addfracture(dfn,arg)
    dfn.fracture.prop(fnew,'failure_strength') = strength
    dfn.fracture.prop(fnew,'age')  = mech.age
    dfn.fracture.extra(fnew,1) = bp1
    dfn.fracture.extra(fnew,2) = bp2
    crack_accum += 1
    if crack_accum > 50
        if frag_time < mech.age
            frag_time = mech.age
            crack_accum = 0
            command 
                fragment compute
            endcommand
            ; go through and update the fracture positions
            loop for (local i = 0, i < 2, i = i + 1)
                local name = 'crack_tension'
                if i = 1
                    name = 'crack_shear'
                endif
                dfn = dfn.find(name)
                if dfn # null
                    loop foreach local frac dfn.fracturelist(dfn)
                        local ball1 = dfn.fracture.extra(frac,1)
                        local ball2 = dfn.fracture.extra(frac,2)
                        if ball1 # null
                            if ball2 # null
                                local len = dfn.fracture.len(frac)/2.0
                                local pos = (ball.pos(ball1)+ball.pos(ball2))/2.0
                                if comp.x(pos)-len > xmin
                                    if comp.x(pos)+len < xmax
                                        if comp.y(pos)-len > ymin
                                            if comp.y(pos)+len < ymax
                                                dfn.fracture.pos(frac) = pos
                                            endif
                                        endif
                                    endif
                                endif
                            endif
                        endif
                    endloop
                endif
            endloop
        endif
    endif
end

define track_init
    command
        dfn delete
        ball result clear
        fragment clear
        fragment register ball-ball
    endcommand
  ; activate fishcalls
    command
        set fish callback bond_break remove @add_crack
        set fish callback bond_break @add_crack
    endcommand
    ; reset global variables
    global crack_accum = 0
    global crack_num = 0
    global track_time0 = mech.age
    global frag_time = mech.age
    global xmin = domain.min.x()
    global ymin = domain.min.y()
    global xmax = domain.max.x()
    global ymax = domain.max.y()

end

;==============================================================================
; eof: fracture.p3fis